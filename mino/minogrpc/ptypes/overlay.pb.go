// Code generated by protoc-gen-go. DO NOT EDIT.
// source: overlay.proto

package ptypes

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// CertificateChain is a wrapper around a chain of x509 raw certificates and its
// address.
type CertificateChain struct {
	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// value represents certificates as ASN.1 DER data. The certificates must be
	// concatenated with no intermediate padding. This value can be parsed with
	// `x509.LoadCertificates`.
	Value                []byte   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CertificateChain) Reset()         { *m = CertificateChain{} }
func (m *CertificateChain) String() string { return proto.CompactTextString(m) }
func (*CertificateChain) ProtoMessage()    {}
func (*CertificateChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_61fc82527fbe24ad, []int{0}
}

func (m *CertificateChain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateChain.Unmarshal(m, b)
}
func (m *CertificateChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateChain.Marshal(b, m, deterministic)
}
func (m *CertificateChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateChain.Merge(m, src)
}
func (m *CertificateChain) XXX_Size() int {
	return xxx_messageInfo_CertificateChain.Size(m)
}
func (m *CertificateChain) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateChain.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateChain proto.InternalMessageInfo

func (m *CertificateChain) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *CertificateChain) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type CertificateAck struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CertificateAck) Reset()         { *m = CertificateAck{} }
func (m *CertificateAck) String() string { return proto.CompactTextString(m) }
func (*CertificateAck) ProtoMessage()    {}
func (*CertificateAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_61fc82527fbe24ad, []int{1}
}

func (m *CertificateAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CertificateAck.Unmarshal(m, b)
}
func (m *CertificateAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CertificateAck.Marshal(b, m, deterministic)
}
func (m *CertificateAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertificateAck.Merge(m, src)
}
func (m *CertificateAck) XXX_Size() int {
	return xxx_messageInfo_CertificateAck.Size(m)
}
func (m *CertificateAck) XXX_DiscardUnknown() {
	xxx_messageInfo_CertificateAck.DiscardUnknown(m)
}

var xxx_messageInfo_CertificateAck proto.InternalMessageInfo

// JoinRequest sends a request to join a network to a distant node. It must
// contain a valid token and its own certificate.
type JoinRequest struct {
	Token                string            `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Chain                *CertificateChain `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *JoinRequest) Reset()         { *m = JoinRequest{} }
func (m *JoinRequest) String() string { return proto.CompactTextString(m) }
func (*JoinRequest) ProtoMessage()    {}
func (*JoinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_61fc82527fbe24ad, []int{2}
}

func (m *JoinRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinRequest.Unmarshal(m, b)
}
func (m *JoinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinRequest.Marshal(b, m, deterministic)
}
func (m *JoinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinRequest.Merge(m, src)
}
func (m *JoinRequest) XXX_Size() int {
	return xxx_messageInfo_JoinRequest.Size(m)
}
func (m *JoinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JoinRequest proto.InternalMessageInfo

func (m *JoinRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *JoinRequest) GetChain() *CertificateChain {
	if m != nil {
		return m.Chain
	}
	return nil
}

// JoinResponse is a response of a join request that contains the list of
// certificates known by the distant node.
type JoinResponse struct {
	Peers                []*CertificateChain `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *JoinResponse) Reset()         { *m = JoinResponse{} }
func (m *JoinResponse) String() string { return proto.CompactTextString(m) }
func (*JoinResponse) ProtoMessage()    {}
func (*JoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_61fc82527fbe24ad, []int{3}
}

func (m *JoinResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinResponse.Unmarshal(m, b)
}
func (m *JoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinResponse.Marshal(b, m, deterministic)
}
func (m *JoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinResponse.Merge(m, src)
}
func (m *JoinResponse) XXX_Size() int {
	return xxx_messageInfo_JoinResponse.Size(m)
}
func (m *JoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JoinResponse proto.InternalMessageInfo

func (m *JoinResponse) GetPeers() []*CertificateChain {
	if m != nil {
		return m.Peers
	}
	return nil
}

// Message is a network message that contains the address of the sender and the
// payload.
type Message struct {
	From                 []byte   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_61fc82527fbe24ad, []int{4}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Message) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

// Packet is a wrapper around a packet.
type Packet struct {
	Serialized           []byte   `protobuf:"bytes,1,opt,name=serialized,proto3" json:"serialized,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Packet) Reset()         { *m = Packet{} }
func (m *Packet) String() string { return proto.CompactTextString(m) }
func (*Packet) ProtoMessage()    {}
func (*Packet) Descriptor() ([]byte, []int) {
	return fileDescriptor_61fc82527fbe24ad, []int{5}
}

func (m *Packet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Packet.Unmarshal(m, b)
}
func (m *Packet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Packet.Marshal(b, m, deterministic)
}
func (m *Packet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Packet.Merge(m, src)
}
func (m *Packet) XXX_Size() int {
	return xxx_messageInfo_Packet.Size(m)
}
func (m *Packet) XXX_DiscardUnknown() {
	xxx_messageInfo_Packet.DiscardUnknown(m)
}

var xxx_messageInfo_Packet proto.InternalMessageInfo

func (m *Packet) GetSerialized() []byte {
	if m != nil {
		return m.Serialized
	}
	return nil
}

// Ack is the return of a unicast request to forward a message.
type Ack struct {
	Errors               []string `protobuf:"bytes,1,rep,name=errors,proto3" json:"errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_61fc82527fbe24ad, []int{6}
}

func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (m *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(m, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetErrors() []string {
	if m != nil {
		return m.Errors
	}
	return nil
}

func init() {
	proto.RegisterType((*CertificateChain)(nil), "ptypes.CertificateChain")
	proto.RegisterType((*CertificateAck)(nil), "ptypes.CertificateAck")
	proto.RegisterType((*JoinRequest)(nil), "ptypes.JoinRequest")
	proto.RegisterType((*JoinResponse)(nil), "ptypes.JoinResponse")
	proto.RegisterType((*Message)(nil), "ptypes.Message")
	proto.RegisterType((*Packet)(nil), "ptypes.Packet")
	proto.RegisterType((*Ack)(nil), "ptypes.Ack")
}

func init() {
	proto.RegisterFile("overlay.proto", fileDescriptor_61fc82527fbe24ad)
}

var fileDescriptor_61fc82527fbe24ad = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x4d, 0x6b, 0xdb, 0x40,
	0x14, 0x94, 0xfc, 0x21, 0xe1, 0x67, 0xd7, 0x35, 0xaf, 0xc6, 0x08, 0x41, 0x4b, 0xd9, 0x93, 0xe8,
	0x41, 0x14, 0xfb, 0xd0, 0x43, 0x21, 0xe0, 0x18, 0x72, 0x08, 0x84, 0x04, 0xf9, 0x17, 0x6c, 0xa4,
	0xe7, 0x58, 0x48, 0xd6, 0x2a, 0xbb, 0x6b, 0x07, 0xe7, 0x96, 0x7f, 0x1e, 0xa4, 0x95, 0xc0, 0x71,
	0x3e, 0x6e, 0x9a, 0xd9, 0x37, 0xa3, 0x99, 0xb7, 0x0b, 0xdf, 0xc4, 0x81, 0x64, 0xce, 0x8f, 0x61,
	0x29, 0x85, 0x16, 0xe8, 0x94, 0xfa, 0x58, 0x92, 0x62, 0x97, 0x30, 0x59, 0x91, 0xd4, 0xe9, 0x26,
	0x8d, 0xb9, 0xa6, 0xd5, 0x96, 0xa7, 0x05, 0x7a, 0xe0, 0xf2, 0x24, 0x91, 0xa4, 0x94, 0x67, 0xff,
	0xb6, 0x83, 0x51, 0xd4, 0x42, 0x9c, 0x42, 0xff, 0xc0, 0xf3, 0x3d, 0x79, 0x9d, 0x9a, 0x37, 0x80,
	0x4d, 0x60, 0x7c, 0xe2, 0xb1, 0x8c, 0x33, 0xb6, 0x86, 0xe1, 0xb5, 0x48, 0x8b, 0x88, 0x1e, 0xf7,
	0xa4, 0x74, 0x25, 0xd3, 0x22, 0xa3, 0xa2, 0xb6, 0x1b, 0x44, 0x06, 0x60, 0x08, 0xfd, 0xb8, 0xfa,
	0x5f, 0x6d, 0x36, 0x9c, 0x7b, 0xa1, 0x89, 0x14, 0x9e, 0xe7, 0x89, 0xcc, 0x18, 0xbb, 0x80, 0x91,
	0x31, 0x55, 0xa5, 0x28, 0x14, 0x55, 0xfa, 0x92, 0x48, 0x56, 0x21, 0xbb, 0x5f, 0xeb, 0xeb, 0x31,
	0xf6, 0x0f, 0xdc, 0x1b, 0x52, 0x8a, 0x3f, 0x10, 0x22, 0xf4, 0x36, 0x52, 0xec, 0x9a, 0x7a, 0xf5,
	0x77, 0xd5, 0xba, 0xe4, 0xc7, 0x5c, 0xf0, 0xa4, 0x69, 0xd7, 0x42, 0x16, 0x80, 0x73, 0xc7, 0xe3,
	0x8c, 0x34, 0xfe, 0x02, 0x50, 0x24, 0x53, 0x9e, 0xa7, 0xcf, 0x94, 0x34, 0xea, 0x13, 0x86, 0xfd,
	0x84, 0xee, 0x32, 0xce, 0x70, 0x06, 0x0e, 0x49, 0x29, 0x9a, 0x68, 0x83, 0xa8, 0x41, 0xf3, 0x97,
	0x0e, 0xb8, 0xb7, 0xe6, 0x1a, 0x70, 0x01, 0xbd, 0xaa, 0x0d, 0xfe, 0x68, 0x63, 0x9f, 0x2c, 0xcc,
	0x9f, 0xbe, 0x25, 0x4d, 0x61, 0x66, 0xe1, 0x7f, 0xe8, 0xaf, 0xb7, 0x5c, 0x12, 0x7e, 0x5a, 0xd6,
	0x9f, 0x7d, 0x70, 0x52, 0x5d, 0x89, 0x85, 0x7f, 0xa0, 0xb7, 0xe2, 0x79, 0x8e, 0xdf, 0xdb, 0x89,
	0x66, 0x1b, 0xfe, 0x39, 0xc1, 0x2c, 0x0c, 0xc1, 0x59, 0x6b, 0x49, 0x7c, 0x87, 0xe3, 0xf6, 0xd0,
	0xac, 0xc0, 0x3f, 0xc3, 0xcc, 0x0a, 0xec, 0xbf, 0x36, 0x06, 0xe0, 0x5e, 0x09, 0xf9, 0xc4, 0x65,
	0xf2, 0x4e, 0x30, 0x6c, 0x71, 0x9d, 0xe2, 0xde, 0xa9, 0xdf, 0xdf, 0xe2, 0x35, 0x00, 0x00, 0xff,
	0xff, 0xd2, 0x04, 0xdd, 0x3c, 0x90, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OverlayClient is the client API for Overlay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OverlayClient interface {
	// Join handles join request from an unknown node. It accepts to share the
	// certificates if the token is valid.
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	// Share handles a certificate share from another participant of the
	// network.
	Share(ctx context.Context, in *CertificateChain, opts ...grpc.CallOption) (*CertificateAck, error)
	// Call is a unicast rpc to send a message to a participant and expect a
	// reply from it.
	Call(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	// Stream is a stream rpc that will build a network of nodes which will
	// relay the messages between each others.
	Stream(ctx context.Context, opts ...grpc.CallOption) (Overlay_StreamClient, error)
	// Forward is used in association with Stream to send a message through
	// relays and get a feedback that the message has been received.
	Forward(ctx context.Context, in *Packet, opts ...grpc.CallOption) (*Ack, error)
}

type overlayClient struct {
	cc grpc.ClientConnInterface
}

func NewOverlayClient(cc grpc.ClientConnInterface) OverlayClient {
	return &overlayClient{cc}
}

func (c *overlayClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, "/ptypes.Overlay/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overlayClient) Share(ctx context.Context, in *CertificateChain, opts ...grpc.CallOption) (*CertificateAck, error) {
	out := new(CertificateAck)
	err := c.cc.Invoke(ctx, "/ptypes.Overlay/Share", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overlayClient) Call(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/ptypes.Overlay/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overlayClient) Stream(ctx context.Context, opts ...grpc.CallOption) (Overlay_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Overlay_serviceDesc.Streams[0], "/ptypes.Overlay/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &overlayStreamClient{stream}
	return x, nil
}

type Overlay_StreamClient interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ClientStream
}

type overlayStreamClient struct {
	grpc.ClientStream
}

func (x *overlayStreamClient) Send(m *Packet) error {
	return x.ClientStream.SendMsg(m)
}

func (x *overlayStreamClient) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *overlayClient) Forward(ctx context.Context, in *Packet, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/ptypes.Overlay/Forward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OverlayServer is the server API for Overlay service.
type OverlayServer interface {
	// Join handles join request from an unknown node. It accepts to share the
	// certificates if the token is valid.
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	// Share handles a certificate share from another participant of the
	// network.
	Share(context.Context, *CertificateChain) (*CertificateAck, error)
	// Call is a unicast rpc to send a message to a participant and expect a
	// reply from it.
	Call(context.Context, *Message) (*Message, error)
	// Stream is a stream rpc that will build a network of nodes which will
	// relay the messages between each others.
	Stream(Overlay_StreamServer) error
	// Forward is used in association with Stream to send a message through
	// relays and get a feedback that the message has been received.
	Forward(context.Context, *Packet) (*Ack, error)
}

// UnimplementedOverlayServer can be embedded to have forward compatible implementations.
type UnimplementedOverlayServer struct {
}

func (*UnimplementedOverlayServer) Join(ctx context.Context, req *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (*UnimplementedOverlayServer) Share(ctx context.Context, req *CertificateChain) (*CertificateAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Share not implemented")
}
func (*UnimplementedOverlayServer) Call(ctx context.Context, req *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (*UnimplementedOverlayServer) Stream(srv Overlay_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (*UnimplementedOverlayServer) Forward(ctx context.Context, req *Packet) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Forward not implemented")
}

func RegisterOverlayServer(s *grpc.Server, srv OverlayServer) {
	s.RegisterService(&_Overlay_serviceDesc, srv)
}

func _Overlay_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverlayServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.Overlay/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverlayServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Overlay_Share_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateChain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverlayServer).Share(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.Overlay/Share",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverlayServer).Share(ctx, req.(*CertificateChain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Overlay_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverlayServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.Overlay/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverlayServer).Call(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Overlay_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OverlayServer).Stream(&overlayStreamServer{stream})
}

type Overlay_StreamServer interface {
	Send(*Packet) error
	Recv() (*Packet, error)
	grpc.ServerStream
}

type overlayStreamServer struct {
	grpc.ServerStream
}

func (x *overlayStreamServer) Send(m *Packet) error {
	return x.ServerStream.SendMsg(m)
}

func (x *overlayStreamServer) Recv() (*Packet, error) {
	m := new(Packet)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Overlay_Forward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Packet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverlayServer).Forward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptypes.Overlay/Forward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverlayServer).Forward(ctx, req.(*Packet))
	}
	return interceptor(ctx, in, info, handler)
}

var _Overlay_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ptypes.Overlay",
	HandlerType: (*OverlayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _Overlay_Join_Handler,
		},
		{
			MethodName: "Share",
			Handler:    _Overlay_Share_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _Overlay_Call_Handler,
		},
		{
			MethodName: "Forward",
			Handler:    _Overlay_Forward_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Overlay_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "overlay.proto",
}
