// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: overlay.proto

package ptypes

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Overlay_Join_FullMethodName    = "/ptypes.Overlay/Join"
	Overlay_Share_FullMethodName   = "/ptypes.Overlay/Share"
	Overlay_Call_FullMethodName    = "/ptypes.Overlay/Call"
	Overlay_Stream_FullMethodName  = "/ptypes.Overlay/Stream"
	Overlay_Forward_FullMethodName = "/ptypes.Overlay/Forward"
)

// OverlayClient is the client API for Overlay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OverlayClient interface {
	// Join handles join request from an unknown node. It accepts to share the
	// certificates if the token is valid.
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	// Share handles a certificate share from another participant of the
	// network.
	Share(ctx context.Context, in *CertificateChain, opts ...grpc.CallOption) (*CertificateAck, error)
	// Call is a unicast rpc to send a message to a participant and expect a
	// reply from it.
	Call(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	// Stream is a stream rpc that will build a network of nodes which will
	// relay the messages between each others.
	Stream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Packet, Packet], error)
	// Forward is used in association with Stream to send a message through
	// relays and get a feedback that the message has been received.
	Forward(ctx context.Context, in *Packet, opts ...grpc.CallOption) (*Ack, error)
}

type overlayClient struct {
	cc grpc.ClientConnInterface
}

func NewOverlayClient(cc grpc.ClientConnInterface) OverlayClient {
	return &overlayClient{cc}
}

func (c *overlayClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, Overlay_Join_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overlayClient) Share(ctx context.Context, in *CertificateChain, opts ...grpc.CallOption) (*CertificateAck, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CertificateAck)
	err := c.cc.Invoke(ctx, Overlay_Share_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overlayClient) Call(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, Overlay_Call_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *overlayClient) Stream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Packet, Packet], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Overlay_ServiceDesc.Streams[0], Overlay_Stream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Packet, Packet]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Overlay_StreamClient = grpc.BidiStreamingClient[Packet, Packet]

func (c *overlayClient) Forward(ctx context.Context, in *Packet, opts ...grpc.CallOption) (*Ack, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Ack)
	err := c.cc.Invoke(ctx, Overlay_Forward_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OverlayServer is the server API for Overlay service.
// All implementations must embed UnimplementedOverlayServer
// for forward compatibility.
type OverlayServer interface {
	// Join handles join request from an unknown node. It accepts to share the
	// certificates if the token is valid.
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	// Share handles a certificate share from another participant of the
	// network.
	Share(context.Context, *CertificateChain) (*CertificateAck, error)
	// Call is a unicast rpc to send a message to a participant and expect a
	// reply from it.
	Call(context.Context, *Message) (*Message, error)
	// Stream is a stream rpc that will build a network of nodes which will
	// relay the messages between each others.
	Stream(grpc.BidiStreamingServer[Packet, Packet]) error
	// Forward is used in association with Stream to send a message through
	// relays and get a feedback that the message has been received.
	Forward(context.Context, *Packet) (*Ack, error)
	mustEmbedUnimplementedOverlayServer()
}

// UnimplementedOverlayServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOverlayServer struct{}

func (UnimplementedOverlayServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedOverlayServer) Share(context.Context, *CertificateChain) (*CertificateAck, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Share not implemented")
}
func (UnimplementedOverlayServer) Call(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedOverlayServer) Stream(grpc.BidiStreamingServer[Packet, Packet]) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedOverlayServer) Forward(context.Context, *Packet) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Forward not implemented")
}
func (UnimplementedOverlayServer) mustEmbedUnimplementedOverlayServer() {}
func (UnimplementedOverlayServer) testEmbeddedByValue()                 {}

// UnsafeOverlayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OverlayServer will
// result in compilation errors.
type UnsafeOverlayServer interface {
	mustEmbedUnimplementedOverlayServer()
}

func RegisterOverlayServer(s grpc.ServiceRegistrar, srv OverlayServer) {
	// If the following call pancis, it indicates UnimplementedOverlayServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Overlay_ServiceDesc, srv)
}

func _Overlay_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverlayServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Overlay_Join_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverlayServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Overlay_Share_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CertificateChain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverlayServer).Share(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Overlay_Share_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverlayServer).Share(ctx, req.(*CertificateChain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Overlay_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverlayServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Overlay_Call_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverlayServer).Call(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Overlay_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OverlayServer).Stream(&grpc.GenericServerStream[Packet, Packet]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Overlay_StreamServer = grpc.BidiStreamingServer[Packet, Packet]

func _Overlay_Forward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Packet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OverlayServer).Forward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Overlay_Forward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OverlayServer).Forward(ctx, req.(*Packet))
	}
	return interceptor(ctx, in, info, handler)
}

// Overlay_ServiceDesc is the grpc.ServiceDesc for Overlay service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Overlay_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ptypes.Overlay",
	HandlerType: (*OverlayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _Overlay_Join_Handler,
		},
		{
			MethodName: "Share",
			Handler:    _Overlay_Share_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _Overlay_Call_Handler,
		},
		{
			MethodName: "Forward",
			Handler:    _Overlay_Forward_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Overlay_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "overlay.proto",
}
